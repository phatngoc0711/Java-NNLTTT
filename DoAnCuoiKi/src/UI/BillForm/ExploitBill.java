package UI.BillForm;

import java.awt.EventQueue;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import Entity.Bill;
import Entity.Car;
import Entity.Customer;
import Model.BillModel;
import Model.CarModel;
import Model.CustomerModel;
import Model.RevenueModel;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.event.AncestorListener;
import javax.swing.event.AncestorEvent;

public class ExploitBill {

	private JFrame frame;
	private JTextField tfIDCus;
	private JTextField tfNameCus;
	private JTextField tfBrandCar;
	private JTextField tfDecriptionCar;
	private ArrayList<Customer> listCustomers = new ArrayList<Customer>();
	private ArrayList<Car> listCars = new ArrayList<Car>();
	private ArrayList<Bill> listBills = new ArrayList<Bill>();
	private JTable table;
	private CustomerModel customerModel = new CustomerModel();
	private CarModel carModel = new CarModel();
	private BillModel billModel = new BillModel();
	private RevenueModel revenueModel = new RevenueModel();
	static int index = 0;
	static float temp = 0;
	private JTextField tfIDCar;
	private DefaultTableModel dtm;

	public ExploitBill() throws ClassNotFoundException, SQLException {
		frame = new JFrame();
		frame.setTitle("Hóa đơn");
		frame.setBounds(300, 100, 650, 400);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JLabel lbInfoBill = new JLabel("Thanh toán hóa đơn");
		lbInfoBill.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lbInfoBill.setBounds(10, 11, 201, 19);
		frame.getContentPane().add(lbInfoBill);
		
		JLabel lbBill = new JLabel("Mã Hóa đơn");
		lbBill.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lbBill.setBounds(20, 41, 89, 19);
		frame.getContentPane().add(lbBill);
		
		JLabel lbIDCus = new JLabel("Mã khách hàng");
		lbIDCus.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lbIDCus.setBounds(20, 65, 89, 19);
		frame.getContentPane().add(lbIDCus);
		
		JLabel lbIDCar = new JLabel("Mã Xe");
		lbIDCar.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lbIDCar.setBounds(355, 41, 89, 19);
		frame.getContentPane().add(lbIDCar);
		
		JLabel lbNameCus = new JLabel("Tên khách hàng");
		lbNameCus.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lbNameCus.setBounds(20, 90, 100, 19);
		frame.getContentPane().add(lbNameCus);
		
		JLabel lbBrandCar = new JLabel("Hãng");
		lbBrandCar.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lbBrandCar.setBounds(355, 65, 89, 19);
		frame.getContentPane().add(lbBrandCar);
		
		JLabel lbDeciptionCar = new JLabel("Mô tả");
		lbDeciptionCar.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lbDeciptionCar.setBounds(355, 90, 89, 19);
		frame.getContentPane().add(lbDeciptionCar);
		
		tfIDCus = new JTextField();
		tfIDCus.setEditable(false);
		tfIDCus.setBounds(125, 65, 201, 20);
		frame.getContentPane().add(tfIDCus);
		tfIDCus.setColumns(10);
		
		tfNameCus = new JTextField();
		tfNameCus.setEditable(false);
		tfNameCus.setColumns(10);
		tfNameCus.setBounds(125, 90, 201, 20);
		frame.getContentPane().add(tfNameCus);
		
		tfBrandCar = new JTextField();
		tfBrandCar.setEditable(false);
		tfBrandCar.setColumns(10);
		tfBrandCar.setBounds(417, 65, 201, 20);
		frame.getContentPane().add(tfBrandCar);
		
		tfDecriptionCar = new JTextField();
		tfDecriptionCar.setEditable(false);
		tfDecriptionCar.setColumns(10);
		tfDecriptionCar.setBounds(417, 90, 201, 20);
		frame.getContentPane().add(tfDecriptionCar);
		
		listCustomers = customerModel.getAllCustomers();
		ArrayList<String> listCusID = new ArrayList<String>();
		for (Customer customer : listCustomers) {
				listCusID.add(customer.getID());
		}
		listCars = carModel.getAllCar();
		ArrayList<String> listCarID = new ArrayList<String>();
		for (Car car : listCars) {
				listCarID.add(car.getID());
		}
		listBills = billModel.getAllBills();
		ArrayList<String> listIDBills = new ArrayList<String>();
		for (Bill bill : listBills) {
				listIDBills.add(bill.getID());
		}
		JComboBox cbIDBill = new JComboBox(listIDBills.toArray());
		cbIDBill.addAncestorListener(new AncestorListener() {
			public void ancestorAdded(AncestorEvent event) {
				for(int i = 0; i<dtm.getRowCount();i++) {
					dtm.removeRow(i);
				}
				for (Bill bill : listBills) {
					if(bill.getID().equals(cbIDBill.getSelectedItem().toString())) {
						for(Customer customer : listCustomers) {
							if(bill.getIDCustomer().equals(customer.getID())) {
								tfIDCus.setText(customer.getID());
								tfNameCus.setText(customer.getName());
								break;
							}
						}
						for(Car car : listCars) {
							if(bill.getIDCar().equals(car.getID())) {
								tfIDCar.setText(car.getID());
								tfBrandCar.setText(car.getBrand());
								tfDecriptionCar.setText(car.getDecription());
								break;
							}
						}
						String[][] listInfoBills;
						try {
							listInfoBills = billModel.listInfoBill(cbIDBill.getSelectedItem().toString());
							for(int i = 0; i < listInfoBills.length ;i++) {
								String[] row = listInfoBills[i];
								dtm.addRow(row);
							}
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						break;
					}
				}
			}
			public void ancestorMoved(AncestorEvent event) {
			}
			public void ancestorRemoved(AncestorEvent event) {
				
			}
		});
		cbIDBill.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				for(int i = 0; i<dtm.getRowCount();i++) {
					dtm.removeRow(i);
				}
				for (Bill bill : listBills) {
					if(bill.getID().equals(cbIDBill.getSelectedItem().toString())) {
						for(Customer customer : listCustomers) {
							if(bill.getIDCustomer().equals(customer.getID())) {
								tfIDCus.setText(customer.getID());
								tfNameCus.setText(customer.getName());
								break;
							}
						}
						for(Car car : listCars) {
							if(bill.getIDCar().equals(car.getID())) {
								tfIDCar.setText(car.getID());
								tfBrandCar.setText(car.getBrand());
								tfDecriptionCar.setText(car.getDecription());
								break;
							}
						}
						String[][] listInfoBills;
						try {
							listInfoBills = billModel.listInfoBill(cbIDBill.getSelectedItem().toString());
							for(int i = 0; i < listInfoBills.length ;i++) {
								String[] row = listInfoBills[i];
								dtm.addRow(row);
							}
						} catch (ClassNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						break;
					}
				}
			}
		});
		cbIDBill.setBounds(124, 40, 202, 22);
		frame.getContentPane().add(cbIDBill);
		
		String[] columnNames = {"STT","Mã công việc", "Tên Công việc", "Khối lượng", "Giảm giá (%)", "Tổng"};
		dtm = new DefaultTableModel(columnNames,0);
		String [][] listInfoBills = billModel.listInfoBill(cbIDBill.getSelectedItem().toString());
		for(int i = 0; i < listInfoBills.length ;i++) {
			String[] row = listInfoBills[i];
			dtm.addRow(row);
		}
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(20, 150, 599, 155);
		frame.getContentPane().add(scrollPane);
		table = new JTable(dtm);
		scrollPane.setViewportView(table);
		
		JButton btnNewButton = new JButton("Thanh toán");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				for(Bill bill : listBills) {
					if(bill.getID().equals(cbIDBill.getSelectedItem().toString())) {
						if(bill.getTotalPrice() == 0) {
							JOptionPane.showMessageDialog(null, "Thanh toán không thành công\n"
									+ "Hóa đơn không có giá trị",
						              "Thanh toán", JOptionPane.ERROR_MESSAGE);
						}else {
							try {
								if(billModel.deleteBillInfo(cbIDBill.getSelectedItem().toString())&&billModel.deleteBill(cbIDBill.getSelectedItem().toString())) {
									if(revenueModel.insertRevenue("Thanh toán", bill.getTotalPrice())) {	
										JOptionPane.showMessageDialog(null, "Thanh toán thành công",
									              "Thanh toán", JOptionPane.INFORMATION_MESSAGE);
									}else {
										JOptionPane.showMessageDialog(null, "Thanh toán không thành công",
									              "Thanh toán", JOptionPane.ERROR_MESSAGE);
									}
									}
									
							} catch (ClassNotFoundException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							} catch (SQLException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						}
					}
				}
			}
		});
		btnNewButton.setFont(new Font("Tahoma", Font.PLAIN, 13));
		btnNewButton.setBounds(269, 314, 100, 36);
		frame.getContentPane().add(btnNewButton);
		
		JLabel lbInfoJob = new JLabel("Danh sách công việc");
		lbInfoJob.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lbInfoJob.setBounds(20, 120, 122, 19);
		frame.getContentPane().add(lbInfoJob);
		
		tfIDCar = new JTextField();
		tfIDCar.setEditable(false);
		tfIDCar.setColumns(10);
		tfIDCar.setBounds(417, 41, 201, 20);
		frame.getContentPane().add(tfIDCar);
		frame.setVisible(true);
	}
}
